

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  STUDENT
  PROFESSOR
  HOD
  LAB_ASSISTANT
  ADMIN
}

model User {
  id           String      @id @default(cuid())
  email        String      @unique
  name         String?
  password     String
  role         Role
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  departmentId Int?
  department   Department? @relation(fields: [departmentId], references: [id])
  hodOf        Department? @relation("HodRelation") // Explicit back-relation for HOD
  tickets      Ticket[]    @relation("UserTickets")
  approvals    Approval[]  @relation("HodApprovals")
}

model Department {
  id        Int        @id
  name      String
  hodId     String     @unique
  hod       User       @relation("HodRelation", fields: [hodId], references: [id])
  resources Resource[] @relation("DepartmentResources")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  User      User[]
  Ticket    Ticket[]
}

model Resource {
  id           String     @id @default(cuid())
  name         String
  description  String?
  type         String?
  quantity     Int
  available    Boolean
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  departmentId Int
  department   Department @relation("DepartmentResources", fields: [departmentId], references: [id])
  tickets      Ticket[]   @relation("ResourceTickets")

  @@unique(fields: [name, departmentId], name: "department_resource")
}

model Ticket {
  id                String       @id @default(cuid())
  userId            String
  user              User         @relation("UserTickets", fields: [userId], references: [id])
  resourceId        String
  resource          Resource     @relation("ResourceTickets", fields: [resourceId], references: [id])
  departmentId      Int
  department        Department   @relation(fields: [departmentId], references: [id])
  requestedQuantity Int
  status            TicketStatus @default(PENDING)
  startTime         String?       // HH:MM
  endTime           String?       // HH:MM
  date              String?       // DD-MM-YYYY
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  approval          Approval?    @relation("TicketApproval")
}

model Approval {
  id         String       @id @default(cuid())
  ticketId   String       @unique
  ticket     Ticket       @relation("TicketApproval", fields: [ticketId], references: [id])
  hodId      String
  hod        User         @relation("HodApprovals", fields: [hodId], references: [id])
  status     TicketStatus
  decisionAt DateTime     @default(now())
}

enum TicketStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}
